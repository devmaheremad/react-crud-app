{"version":3,"sources":["Components/CoursesAdd/CoursesAdd.js","Components/CoursesList/CoursesList.js","App.js","reportWebVitals.js","index.js"],"names":["CoursesAdd","props","className","method","onSubmit","addCourse","onChange","handelChange","htmlFor","type","id","placeholder","value","newCourse","required","CoursesList","state","isEdit","updateCourseItem","e","preventDefault","updateCourse","courseIndex","input","toggleEdit","editCourse","defaultValue","courseName","ref","v","setState","this","onClick","deleteCourse","Component","App","courses","name","renderCourse","length","map","course","index","push","target","indexClicked","splice","newValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ee20cae.chunk.js","sourcesContent":["import React from 'react'\r\nimport './CoursesAdd.css'\r\n\r\nconst CoursesAdd = (props) => {\r\n    return (\r\n        <section className=\"courses-add\">\r\n            <form method=\"post\" onSubmit={props.addCourse} onChange={props.handelChange}>\r\n                <label htmlFor=\"coursename\">\r\n                <input type=\"text\" id=\"coursename\" placeholder='Type your course name here!' value={props.newCourse} required />\r\n                </label>\r\n                <input type=\"submit\" value=\"Add!\"/>\r\n            </form>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default CoursesAdd","import React, {Component} from 'react'\r\nimport './CoursesList.css'\r\nclass CoursesList extends Component {\r\n    state = {\r\n        isEdit: false\r\n    }\r\n\r\n    updateCourseItem = (e) => {\r\n        e.preventDefault()\r\n        this.props.updateCourse(this.props.courseIndex, this.input.value)\r\n        this.toggleEdit()\r\n    }\r\n\r\n    editCourse = () => {\r\n        return(\r\n            <form className='update-coures' method=\"post\" onSubmit={this.updateCourseItem}>\r\n                <input type=\"text\" defaultValue={this.props.courseName} ref={(v) => {this.input = v}}/>\r\n                <button className='edit-btn'>Update Course</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n    toggleEdit = () => {\r\n        let {isEdit} = this.state\r\n        this.setState({\r\n            isEdit: !isEdit\r\n        })\r\n    }\r\n\r\n    render () {\r\n        let {isEdit} = this.state\r\n        return (\r\n            isEdit ? this.editCourse() : (\r\n                <li key={this.props.courseIndex}>\r\n                    <span className='id'>{this.props.courseIndex}</span>\r\n                    <span className='course-name'>{this.props.courseName}</span>\r\n                    <span className='action'>\r\n                        <button className='edit-btn' onClick={() => {this.toggleEdit()}}>Edit</button>\r\n                        <button className='delete-btn' onClick={() => {this.props.deleteCourse(this.props.courseIndex)}}>Delete</button>\r\n                    </span>\r\n                </li>\r\n            )\r\n        )   \r\n    }\r\n}\r\n\r\nexport default CoursesList","import React, { Component, Fragment } from 'react'\nimport CoursesAdd from './Components/CoursesAdd/CoursesAdd'\nimport CoursesList from './Components/CoursesList/CoursesList'\nimport './index.css';\nclass App extends Component {\n\n    state = {\n        courses: [\n            {name: 'HTML/HTML5'},\n            {name: 'CSS/CSS3'},\n            {name: 'JavaScript'}\n        ],\n        newCourse: ''\n    }\n\n    // renderCourse\n    renderCourse = () => {\n        const {courses} = this.state\n        let length = this.state.courses.length\n        return (\n            length ? (\n                courses.map((course, index) => {\n                    return (\n                        <CoursesList courses={this.state.courses} key={index} courseName={course.name} courseIndex={index} deleteCourse={this.deleteCourse} updateCourse={this.updateCourse} />\n                    )\n                })\n            ) : (\n                <div>\n                    <h2>There are no courses here!</h2>\n                </div>\n            )\n        )\n    }\n\n    // Add course to the list\n    addCourse = (e) => {\n        e.preventDefault()\n        let {courses} = this.state\n        let {newCourse} = this.state\n        courses.push({name: newCourse})\n        this.setState({\n            courses,\n            newCourse: ''\n        })\n    }\n\n    // To save the entry of the new course\n    handelChange = (e) => {\n        let {newCourse} = this.state\n        newCourse = e.target.value\n        this.setState({\n            newCourse\n        })\n    }\n\n    // To delete the course when click on the delete btn\n    deleteCourse = (indexClicked) => {\n        let {courses} = this.state\n        courses.splice(indexClicked, 1)\n        this.setState({\n            courses\n        }) \n    }\n\n    // To update the name of the course\n    updateCourse = (index, newValue) => {\n        let {courses} = this.state\n        let course = courses[index]\n        course.name = newValue\n        this.setState({\n            courses\n        })\n    }\n\n    render() {\n\n        return(\n            <Fragment>\n                <h1 className='text-center'>Crud App By React</h1>\n                <CoursesAdd addCourse={this.addCourse} handelChange={this.handelChange} newCourse={this.state.newCourse} />\n                <section className=\"courses-list\">\n                <div className=\"t-header\">\n                    <span className=\"id title\">#</span>\n                    <span className=\"course-name title\">Course name</span>\n                    <span className=\"action title\">Action</span>\n                </div>\n                <ul className='list-unstyled'>\n                    {this.renderCourse()}\n                </ul>\n                </section>\n            </Fragment>\n        )\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}